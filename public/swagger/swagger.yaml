swagger: '2.0'
info:
  title: Gryphon API
  description: Store and load case management fragments using BPMN and a JSON API.
  version: 1.0.0
schemes:
  - http
basePath: /api
produces:
  - application/json
paths:
  /scenario/{id}:
    get:
      summary: Scenario
      description: |
        The scenario endpoint delivers information about a certain scenario, including
        revision, termination condition, all data objects and all fragments.
      parameters:
        - name: id
          in: path
          description: The scenario id.
          required: true
          type: string
          format: string
        - name: populate
          in: query
          description: If true, the scenario will be populated with all child-objects.
          required: false
          type: boolean
      tags:
        - Scenario
      responses:
        '200':
          description: An scenario. Populated if populate was set on true.
          schema:
            $ref: '#/definitions/PopulatedScenario'
        '404':
          description: Scenario not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Updates a given scenario
      description: |
        If used, the repository will update the scenario that's using this idea. The repository doesn't care if the ID in the scenario object and the ID given via path match. The revision-attribute will be updated if there's an difference between the old and the new version.
      parameters:
        - name: id
          in: path
          description: The scenario id.
          required: true
          type: string
          format: string
        - name: scenario
          in: body
          description: The scenario object.
          required: true
          schema:
            $ref: '#/definitions/Scenario'
      tags:
        - Scenario
      responses:
        '200':
          description: The updated scenario, possibly with updated revision.
          schema:
            $ref: '#/definitions/Scenario'
        '404':
          description: Scenario not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes the given scenario
      description: |
        This endpoints deletes the given scenario. The associated domainmodel and
        fragments stay in the database.
      parameters:
        - name: id
          in: path
          description: The scenario id.
          required: true
          type: string
          format: string
      tags:
        - Scenario
      responses:
        '200':
          description: The deleted scenario.
          schema:
            $ref: '#/definitions/Scenario'
        '404':
          description: Scenario not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scenario:
    get:
      summary: Returns a list of all available scenarios.
      description: |
        Returns a list of all scenarios. This list might be filtered by searching
        using a name.
      parameters:
        - name: query
          in: query
          description: Might be used to filter the scenarios.
          required: false
          type: string
          format: string
      tags:
      - Scenario
      responses:
        '200':
          description: The list of scenarios
          schema:
            $ref: '#/definitions/ScenarioList'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a new scenario
      description: |
        This endpoint stores a new scenario on the server. The DataObjects and
        Fragments will be added later using the associated endpoints. Any DomainModels and
        Fragments given in the objects server by the provided scenario object will be
        validated and added to the new scenario anyway.
      parameters:
        - name: scenario
          in: body
          description: The scenario object. This can either be populated (contains domainmodel and fragments) or unpopulated.
          required: true
          schema:
            $ref: '#/definitions/PopulatedScenario'
      tags:
        - Scenario
      responses:
        '200':
          description: The updated scenario, maybe with updated revision.
          schema:
            $ref: '#/definitions/Scenario'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /fragment/{id}:
    get:
      summary: Returns an fragment.
      description: |
        This endpoint returns a fragment based on the given ID.
      parameters:
        - name: id
          in: path
          description: The fragments id.
          required: true
          type: string
          format: string
        - name: deliver_xml
          in: query
          description: If false the the endpoint will not deliver the fragments xml.
          required: false
          type: boolean
          format: boolean
      tags:
        - Fragment
      responses:
        '200':
          description: The fragment if found.
        '404':
          description: Fragment not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Updates a fragment.
      description: |
        This endpoint updates a fragment based on the given ID. The repository
        doesn't care wether the ID in the path and the ID in the fragment match,
        it always uses the fragment. The fragments revision will be increased if
        it differs (XML based) from earlier versions. All scenarios that are
        associated with the given fragment will also get upated
        (including a new revision). The repository will also parse the fragment
        into an Object, by parsing the given XML. The parsed structure will be
        used for validation and the structure endpoint.
      parameters:
        - name: id
          in: path
          description: The fragments id.
          required: true
          type: string
          format: string
        - name: fragment
          in: body
          description: The fragment.
          required: true
          schema:
            $ref: '#/definitions/Fragment'
      tags:
        - Fragment
      responses:
        '200':
          description: The fragment if found and update was succesfull.
          schema:
            $ref: '#/definitions/Fragment'
        '404':
          description: Fragment not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes a fragment.
      description: |
        This endpoint deletes the fragment with this id.
      parameters:
        - name: id
          in: path
          description: The fragments id.
          required: true
          type: string
          format: string
      tags:
        - Fragment
      responses:
        '200':
          description: The fragment if found.
          schema:
            $ref: '#/definitions/Fragment'
        '404':
          description: Fragment not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /fragment/{id}/structure:
    get:
      summary: Returns a fragments BPMN-structure
      description: |
        This returns the BPMN structure of a given fragment. This is done by
        parsing the XMl stripping all attributes that are not used for the
        data structure (attributes that are just used for visualisation).
      parameters:
        - name: id
          in: path
          description: The fragments id.
          required: true
          type: string
          format: string
      tags:
        - Fragment
      responses:
        '200':
          description: The fragments structure if found.
          schema:
            $ref: '#/definitions/FragmentStructureObject'
        '404':
          description: Fragment not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /fragment/{id}/validate:
    get:
      summary: Validates a fragment
      description: |
        This validates a fragment and returns all messages generated by the validator.
        A fragment is validated according to the following rules:
        1. The fragment is structural sound.
        2. The fragment doesn't reference any invalid dataclasses or attributes.
        3. There are no state-transitions that are not allowed according to the
        dataclass-id
        4. There are no events without Event-Query
        5. There are no duplicate events after event-based-gateways.
        6. There are no events that are not support in the execution engine.
      parameters:
        - name: id
          in: path
          description: The fragments id.
          required: true
          type: string
          format: string
      tags:
        - Fragment
      responses:
        '200':
          description: The list of messages.
          schema:
            $ref: '#/definitions/MessageList'
        '404':
          description: Fragment not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /fragment/{id}/xml:
    get:
      summary: Returns a fragments BPMN-xml
      description: |
        This returns the BPMN-xml of a given fragment.
      parameters:
        - name: id
          in: path
          description: The fragments id.
          required: true
          type: string
          format: string
      tags:
        - Fragment
      responses:
        '200':
          description: The fragment-xml if found.
        '404':
          description: Fragment not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /fragment:
    get:
      summary: Returns a list of all available fragments.
      description: |
        Returns a list of all fragments. This list might be filtered by searching
        using a name.
      parameters:
        - name: query
          in: query
          description: Might be used to filter the fragments by name.
          required: false
          type: string
          format: string
      tags:
      - Fragment
      responses:
        '200':
          description: The list of fragments.
          schema:
            $ref: '#/definitions/FragmentList'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a new scenario
      description: |
        This endpoint stores a new fragment on the server. If the body contains
        contains no content, the default fragment xml is used.
      parameters:
        - name: scenario
          in: body
          description: The fragment object.
          required: true
          schema:
            $ref: '#/definitions/Fragment'
      tags:
        - Fragment
      responses:
        '200':
          description: The updated scenario, maybe with updated revision.
          schema:
            $ref: '#/definitions/Fragment'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scenario/associatefragment:
    post:
      summary: Associated a fragment with a scenario.
      description: |
        This allows it to associate (add) a fragment with a scenario. To add a
        fragment to a scenario to steps are required. First upload the fragment
        using /fragment POST and then associate it with the scenario using this
        endpoint.
      parameters:
        - name: fragmentid
          in: query
          description: The fragment to associate.
          required: true
          type: string
          format: string
        - name: scenarioid
          in: query
          description: The scenarios id.
          type: string
          format: string
          required: true
      tags:
        - Fragment
        - Scenario
      responses:
        '200':
          description: The updated scenario if found.
          schema:
            $ref: '#/definitions/Scenario'
        '404':
          description: Fragment or scenario not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scenario/associatedomainmodel:
    post:
      summary: Associates a domain model with a scenario.
      description: |
        This allows it to associate (add) a domain model with a scenario. To add
        a domain model to a scenario to steps are required. First upload the
        domain model using /domainmodel POST and then associate it with the
        scenario using this endpoint.
      parameters:
        - name: domainmodelid
          in: query
          description: The domainmodel to associate.
          type: string
          format: string
          required: true
        - name: scenarioid
          in: query
          description: The scenarios id.
          type: string
          format: string
          required: true
      tags:
        - DomainModel
        - Scenario
      responses:
        '200':
          description: The updated scenario if found.
          schema:
            $ref: '#/definitions/Scenario'
        '404':
          description: Domainmodel or scenario not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /domainmodel/{id}:
    get:
      summary: Returns a domain model based on its ID.
      description: |
        Returns a full domain model including all attributes.
      parameters:
        - name: id
          in: path
          description: The domain models id.
          type: string
          format: string
          required: true
      tags:
        - DomainModel
      responses:
        '200':
          description: The domain model if found.
          schema:
            $ref: '#/definitions/DomainModel'
        '404':
          description: Model not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Updates a domain model.
      description: |
        This endpoint updates a domain model based on its ID. If the attributes differ from earlier version, the revision will be increased. Also, all scenarios that reference a domain model will get increased an revision. The repository doesn't care if the id given in the object differs from the id given in the path. It will always use the paths ID.
      parameters:
        - name: id
          in: path
          description: The domain models id.
          required: true
          type: string
          format: string
        - name: domainmodel
          in: body
          description: The domainmodel-content.
          required: true
          schema:
            $ref: '#/definitions/DomainModel'
      tags:
        - DomainModel
      responses:
        '200':
          description: The domain model if found and update was succesfull.
          schema:
            $ref: '#/definitions/DomainModel'
        '404':
          description: Model not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /domainmodel:
    get:
      summary: Lists all domainmodels.
      description: |
        Returns a list of all available domain models.
        des  Returns a list of all domain models. This list might be filtered by searching
        using a name.
      parameters:
        - name: query
          in: query
          description: Might be used to filter the domain models by name.
          required: false
          type: string
          format: string
      tags:
      - DomainModel
      responses:
        '200':
          description: The list of domain models.
          schema:
            $ref: '#/definitions/DomainModelList'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a new domain model
      description: |
        This endpoint stores a new domain model on the server.
      parameters:
        - name: domainmodel
          in: body
          description: The model object.
          required: true
          schema:
            $ref: '#/definitions/DomainModel'
      tags:
        - DomainModel
      responses:
        '200':
          description: The updated model, with updated id.
          schema:
            $ref: '#/definitions/DomainModel'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scenario/{id}/validate:
    get:
      summary: Validates a scenario.
      description: |
        This endpoint validates a scenario. It validates all fragments according to the same rules that are used for the
        fragment-validation and validates all fragments.
      parameters:
        - name: id
          in: path
          description: The scenarios id.
          required: true
          type: string
          format: string
      tags:
        - Scenario
        - Fragment
        - DomainModel
      responses:
        '200':
          description: The validation report.
          schema:
            $ref: '#/definitions/MessageList'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scenario/{id}/export:
    get:
      summary: Exports a scenario.
      description: |
        This endpoint exports the scenario to the given export-target.
        The server should return an 200 if the export was succesfull. All messages returned by the server will be
        returned in the response of this endpoint.
      parameters:
        - name: id
          in: path
          description: The scenarios id.
          required: true
          type: string
          format: string
        - name: exportID
          in: body
          description: The request object that contains the exportID in the exportID-property.
          required: true
          schema:
            $ref: '#/definitions/ExportRequest'
      tags:
        - Scenario
        - Export
      responses:
        '200':
          description: The data that was returned by the target-server. There is no description of the response as the response will contain the response of the target-server.
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Scenario doesn't exist
        '400':
          description: Target server is unreachable or doesn't respond as expected.
  /export:
    get:
      summary: |
        Returns a list of all available export-targets.
      tags:
        - Export
      responses:
        '200':
          description: The list of targets.
          schema:
            $ref: '#/definitions/ExportList'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a new export-target.
      description: |
        This endpoint creates a new export-target.
      parameters:
        - name: export
          in: body
          description: The export object.
          required: true
          schema:
            $ref: '#/definitions/Export'
      tags:
        - Export
      responses:
        '200':
          description: The created export-target, with updated id.
          schema:
            $ref: '#/definitions/Export'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /export/{id}:
    delete:
      summary: |
        Deletes the export-target with the given ID.
      parameters:
        - name: id
          in: path
          description: The target id.
          required: true
          type: string
          format: string
      tags:
        - Export
      responses:
        '200':
          description: The deleted export-target.
          schema:
            $ref: '#/definitions/Export'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a new export-target.
      description: |
        This endpoint updates the given export-target.
      parameters:
        - name: id
          in: path
          description: The target id.
          required: true
          type: string
          format: string
        - name: export
          in: body
          description: The export object.
          required: true
          schema:
            $ref: '#/definitions/Export'
      tags:
        - Export
      responses:
        '200':
          description: The updated export-target.
          schema:
            $ref: '#/definitions/Export'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /fragment/{id}/assocdomainmodel:
    get:
      summary: Returns the domainmodel associated with this fragment.
      description: |
        Returns the domainmodel that belongs to the scenario this fragment belongs to.
      parameters:
        - name: id
          in: path
          description: The domain models id.
          type: string
          format: string
          required: true
      tags:
        - DomainModel
        - Fragment
      responses:
        '200':
          description: The domain model if found.
          schema:
            $ref: '#/definitions/DomainModel'
        '404':
          description: Model not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Scenario:
    type: object
    properties:
      name:
        type: string
        description: 'The scenarios name'
      _id:
        type: string
        format: string
        description: 'Unique identifier of any scenario. Usually a string with a length of 24 chars.'
      terminationconditions:
        type: array
        items:
          $ref: '#/definitions/TerminationCondition'
        description: 'The termination conditions that are used.'
      startconditions:
        type: array
        items:
          $ref: '#/definitions/StartCondition'
        description: 'The start conditions that trigger the start of this scenario'
      domainmodel:
        type: string
        format: string
        description: 'The ID of the associated domain model.'
      fragments:
        type: array
        items:
          type: string
          format: string
        description: 'The IDs of associated fragments.'
      revision:
        type: number
        format: integer
        description: |
          The scenarios revision. Is increased automatically if the
          fragments, the data_objects or the termination condition is different
          from the last version

  PopulatedScenario:
    type: object
    properties:
      name:
        type: string
        description: 'The scenarios name'
      _id:
        type: string
        format: string
        description: 'Unique identifier of any scenario. Usually a string with a length of 24 chars.'
      terminationconditions:
        type: array
        items:
          $ref: '#/definitions/TerminationCondition'
        description: 'The termination conditions that are used.'
      startconditions:
        type: array
        items:
          $ref: '#/definitions/StartCondition'
        description: 'The start conditions that trigger the start of this scenario'
      domainmodel:
        $ref: '#/definitions/DomainModel'
      fragments:
        type: array
        items:
          $ref: '#/definitions/Fragment'
        description: 'The associated fragments.'
      revision:
        type: number
        format: integer
        description: |
          The scenarios revision. Is increased automatically if the
          fragments, the data_objects or the termination condition is different
          from the last version
  StartCondition:
    type: object
    properties:
      _id:
        type: string
        format: string
        description: 'The unique identifier the startcondition.'
      query:
        type: string
        description: 'The query that triggers this startcondition'
      dataclassses:
        type: array
        items:
          $ref: '#/definitions/StartConditionDataclass'
        description: 'The mapping of event-values to dataobject-values'
  StartConditionDataclass:
    type: object
    properties:
      _id:
        type: string
        format: string
        description: 'The unique identifier the startcondition data class.'
      classname:
        type: string
        description: 'The name of the dataclass, that should be used to instantiate this object'
      state:
        type: string
        description: 'The state the newly created dataobject has.'
      mapping:
        type: array
        items:
          $ref: '#/definitions/StartConditionAttrMapping'
        description: 'The definition which values of the event should be put in the values of this dataobject.'
  StartConditionAttrMapping:
    type: object
    properties:
      _id:
        type: string
        format: string
        description: 'The unique identifier the mapping tuple.'
      path:
        type: string
        description: 'The JSON Path that specifies where to read this value.'
      attr:
        type: string
        description: 'The attribute were the value should get written.'
  TerminationCondition:
    type: string
    description: |
      The termination condition in the format "Dataclass[State], Dataclass[State2]"
  Export:
    type: object
    properties:
      _id:
        type: string
        format: string
        description: 'The unique identifier of this export-target.'
      name:
        type: string
        description: 'The name of the export-target.'
      url:
        type: string
        description: 'The url of this export-target.'
  Fragment:
    type: object
    properties:
      name:
        type: string
        description: 'The fragments name.'
      _id:
        type: string
        format: string
        description: 'The fragments unique identifier.'
      content:
        type: string
        format: integer
        description: 'The BPMN-XML used to describe the content.'
      revision:
        type: number
        format: integer
        description: 'The fragments revision. Gets increased everytime the fragment is updated.'
  FragmentStructureObject:
    type: object
  DomainModel:
    type: object
    required:
      - name
      - dataclasses
    properties:
      name:
        type: string
        description: 'The name of the domain model.'
      _id:
        type: string
        format: string
        description: 'The unique identifier of the domain model.'
      revision:
        type: number
        format: integer
        description: 'The domain models revision. Gets increased everytime the domain model is updated.'
      dataclasses:
        type: array
        description: 'The data classes belonging to the domain model.'
        items:
          $ref: '#/definitions/DataClass'
  DataClass:
    type: object
    properties:
      name:
        type: string
        description: 'The name of the data class.'
      _id:
        type: string
        format: string
        description: 'The unique identifier the data class.'
      is_root:
        type: boolean
        description: 'Describes whether the data class is the root element of the domain model.'
      is_event:
        type: boolean
        description: 'Describes whether the data class represents event data.'
      is_resource:
        type: boolean
        description: 'Describes whether the data class represents a resource in the resource manager.'
      attributes:
        type: array
        description: 'The attributes of the data class.'
        items:
          $ref: '#/definitions/DataClassAttribute'
  DataClassAttribute:
    type: object
    properties:
      _id:
        type: string
        format: string
        description: 'The unique identifier the attribute.'
      name:
        type: string
        description: 'The name of the attribute.'
      datatype:
        type: string
        description: 'The datatype of the attribute.'
  MessageList:
    type: array
    description: 'A list of messages.'
    items:
      $ref: '#/definitions/Message'
  Message:
    type: object
    properties:
      text:
        type: string
        description: 'The message for this error. This should be displayed to the user.'
      type:
        type: string
        description: 'The type of the error.'
  ScenarioList:
    type: array
    description: 'All scenarios found.'
    items:
      $ref: '#/definitions/Scenario'
  FragmentList:
    type: array
    description: 'All fragments found.'
    items:
      $ref: '#/definitions/Fragment'
  DomainModelList:
    type: array
    description: 'All models found.'
    items:
      $ref: '#/definitions/DomainModel'
  Error:
    type: object
  ExportRequest:
    type: object
    properties:
      exportID:
        type: string
        format: string
        description: The url the post-call should use.
  ExportList:
    type: array
    items:
      $ref: '#/definitions/Export'
    description: 'A list of export-targets'
